{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "Baas Banking",
    "description": "**Description**: Api responsible for managing accounts, statements & balance\n# Schemas\n<a name=\"account_statuses\"></a>\n\n  ## Account statuses\n\n  <table>\n    <tr>\n      <td>Status</td>\n      <td>Description</td>\n    </tr>\n    <tr>\n      <td>`BLOCKED`</td>\n      <td>Informs that the account is blocked and can not do any transaction.</td>\n    </tr>\n    <tr>\n      <td>`ENABLED`</td>\n      <td>Informs that the account is enabled and ready for use.</td>\n    </tr>\n    <tr>\n      <td>`CANCELED`</td>\n      <td>Informs that the account is canceled and not able to do anything.</td>\n    </tr>\n  </table>\n\n\n# Errors\nAccount Middleware uses [HTTP response status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to indicate the success or failure of your API requests.\nIn general, there are three status code ranges you can expect:\n- `2xx` success status codes confirm that your request worked as expected\n- `4xx` error status codes indicate an error because of the information provided (e.g., a required parameter was not provided)\n- `5xx` error status codes are rare and indicate an error with R4's servers\n\n## HTTP Status code summary\nExtracted from [Stripe API codes](https://stripe.com/docs/api/errors)\n- `200 - OK` Everything worked as expected.\n- `400 - Bad Request` The request was unacceptable, often due to missing a required parameter.\n- `401 - Unauthorized` No valid API key provided.\n- `403 - Forbidden` The API key doesn't have permissions to perform the request.\n- `404 - Not Found` The requested resource doesn't exist.\n- `429 - Too Many Requests` Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.\n- `500, 502, 503, 504 - Server Errors` Something went wrong on R4's end.\n## Error codes\nBelow is a list of possible error codes that can be returned:\n<table>\n    <tr>\n      <td>Code</td>\n      <td>Description</td>\n    </tr>\n    <tr>\n      <td>`ACCOUNT_NOT_FOUND`</td>\n      <td>The account informed was not found.</td>\n    </tr>\n    <tr>\n      <td>`PROFILE_NOT_FOUND`</td>\n      <td>The profile informed was not found.</td>\n    </tr>\n    <tr>\n      <td>`UUID_INVALID`</td>\n      <td>The uuid informed was not valid.</td>\n    </tr>\n    <tr>\n      <td>`REQUEST_VALIDATOR_ERROR`</td>\n      <td>The request is not formatted correctly.</td>\n    </tr>\n    <tr>\n      <td>`UNAUTHORIZED`</td>\n      <td>The request unauthorized, no valid API key provided</td>\n    </tr>\n  </table>\n"
  },
  "servers": [
    {
      "description": "Development",
      "url": "https://develop.r4digital.cloud/banking"
    },
    {
      "description": "Production",
      "url": "https://api.r4digital.cloud/banking"
    }
  ],
  "tags": [
    {
      "name": "Account"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "List of accounts",
        "description": "Returns a list of accounts. If no account is found, an **empty** list will be returned.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "after",
            "schema": {
              "type": "string"
            },
            "description": "Base64 filter to bring only accounts after the provided value",
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string"
            },
            "description": "Base64 filter to bring only accounts before the provided value",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of accounts to return. Can be omitted if provided before or after filters with limit embedded in them. If nothing is provided, the default will be 1000 as limit",
            "required": false
          },
          {
            "in": "query",
            "name": "document_number",
            "schema": {
              "type": "integer"
            },
            "description": "The document number for specific account.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cursor": {
                      "type": "object",
                      "properties": {
                        "after": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the last item of the list. If no more items exist, the property is removed from the response"
                        },
                        "before": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the first item of the list. If its the first available item, the property is removed from the response"
                        },
                        "limit": {
                          "type": "number",
                          "format": "base64",
                          "description": "number of items to return."
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Describes the properties of an account.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the account.",
                            "format": "uuid-v4",
                            "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                          },
                          "application_id": {
                            "type": "string",
                            "description": "Unique identifier of the application which the account is bound.",
                            "format": "uuid-v4",
                            "example": "6d814c28-ff73-443c-bfe0-48d518aa32fa"
                          },
                          "bank_code": {
                            "type": "string",
                            "description": "Code identifying the account's bank.",
                            "example": "160"
                          },
                          "branch": {
                            "type": "string",
                            "description": "Number of the account's branch.",
                            "example": "0001"
                          },
                          "account_number": {
                            "type": "string",
                            "description": "Number of the account.",
                            "example": "123456"
                          },
                          "account_check_digit": {
                            "type": "string",
                            "description": "Number of the account's *check-digit*.",
                            "example": "7"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the account. [See definitions here](#account_statuses).\n",
                            "enum": [
                              "BLOCKED",
                              "ENABLED",
                              "CANCELED"
                            ],
                            "example": "ENABLED"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the person bound to the account.",
                            "example": "Julian Alfred Pankratz"
                          },
                          "document": {
                            "type": "object",
                            "description": "Document of the person bound to the account.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Document's type:\n  - `CPF`: Pessoa f\u00edsica (Natural)\n  - `CNPJ`: Pessoa jur\u00eddica (Juridical)\n",
                                "example": "CPF",
                                "enum": [
                                  "CPF",
                                  "CNPJ"
                                ]
                              },
                              "value": {
                                "type": "string",
                                "description": "Document's value",
                                "example": "12345678901"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest, UuidError].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Uuid Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "UUID_INVALID",
                          "enum": [
                            "UUID_INVALID"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Uuid invalid"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Unauthorized].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unauthorized",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAUTHORIZED",
                              "enum": [
                                "UNAUTHORIZED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unauthorized"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [NotFound, AccountNotFound, ProfileNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Profile Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "PROFILE_NOT_FOUND",
                          "enum": [
                            "PROFILE_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Profile not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Creates an account",
        "description": "Creates an account",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account_type": {
                    "type": "string",
                    "enum": [
                      "CHECKING_ACCOUNT",
                      "SAVINGS_ACCOUNT",
                      "CONTROL_ACCOUNT",
                      "GRAPHIC_ACCOUNT",
                      "PAYMENT_ACCOUNT"
                    ],
                    "example": "PAYMENT_ACCOUNT"
                  },
                  "client_code": {
                    "type": "number",
                    "example": 12345
                  },
                  "document_number": {
                    "type": "number",
                    "example": 55605714074
                  }
                },
                "required": [
                  "account_type",
                  "client_code",
                  "document_number"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Describes the properties of an account.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the account.",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "application_id": {
                      "type": "string",
                      "description": "Unique identifier of the application which the account is bound.",
                      "format": "uuid-v4",
                      "example": "6d814c28-ff73-443c-bfe0-48d518aa32fa"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the person bound to the account.",
                      "example": "Julian Alfred Pankratz"
                    },
                    "document_type": {
                      "type": "string",
                      "enum": [
                        "CPF",
                        "CNPJ"
                      ],
                      "example": "CPF"
                    },
                    "account_type": {
                      "type": "string",
                      "enum": [
                        "CHECKING_ACCOUNT",
                        "SAVINGS_ACCOUNT",
                        "CONTROL_ACCOUNT",
                        "GRAPHIC_ACCOUNT",
                        "PAYMENT_ACCOUNT"
                      ],
                      "example": "PAYMENT_ACCOUNT"
                    },
                    "account_digit": {
                      "type": "number",
                      "description": "Check digit of the account",
                      "example": 9
                    },
                    "account_number": {
                      "type": "number",
                      "description": "Account number without the check digit",
                      "example": 55605714074
                    },
                    "agency_number": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest, FailedToCreateAccountBalanceError, AccountTypeInvalid].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Failed to Create Account Balance",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "FAILED_TO_CREATE_ACCOUNT_BALANCE",
                          "enum": [
                            "FAILED_TO_CREATE_ACCOUNT_BALANCE"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Failed to create account balance."
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Invalid registration data",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INVALID_REGISTRATION_DATA",
                          "enum": [
                            "INVALID_REGISTRATION_DATA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid registration data."
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Account Type Invalid",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "ACCOUNT_TYPE_INVALID",
                          "enum": [
                            "ACCOUNT_TYPE_INVALID"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Account type invalid."
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Unauthorized].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unauthorized",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAUTHORIZED",
                              "enum": [
                                "UNAUTHORIZED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unauthorized"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [NotFound, ClientCodeNotFoundError].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Client Code Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "CLIENT_CODE_NOT_FOUND",
                          "enum": [
                            "CLIENT_CODE_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Client code not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Error with types [Conflict, AccountAlreadyExistsError, BankingStatementAlreadyExistsError].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Conflict",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "CONFLICT",
                              "enum": [
                                "CONFLICT"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "The request could not be completed due to a conflict with the current state of the target resource"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "409"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Account Already Exists",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "ACCOUNT_ALREADY_EXISTS",
                          "enum": [
                            "ACCOUNT_ALREADY_EXISTS"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Account already exists."
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "409"
                        }
                      }
                    },
                    {
                      "title": "Banking statement already exists",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BANKING_STATEMENT_ALREADY_EXISTS",
                          "enum": [
                            "BANKING_STATEMENT_ALREADY_EXISTS"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Banking statement already exists."
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "409"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{account_id}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete of account",
        "description": "Delete of account, only if the account has no balance.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the account.",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "The reason to close account",
                    "example": "Requisi\u00e7\u00e3o do usu\u00e1rio"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Account successfully delete."
          },
          "400": {
            "description": "Error with types [BadRequest, AccountBalanceError, UuidError].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Account Balance Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "ACCOUNT_BALANCE_ERROR",
                          "enum": [
                            "ACCOUNT_BALANCE_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "The account has a balance."
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Uuid Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "UUID_INVALID",
                          "enum": [
                            "UUID_INVALID"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Uuid invalid"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Unauthorized].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unauthorized",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAUTHORIZED",
                              "enum": [
                                "UNAUTHORIZED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unauthorized"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [NotFound, AccountNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve an account",
        "description": "Returns an account.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the account.",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Describes the properties of an account.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the account.",
                      "format": "uuid-v4",
                      "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                    },
                    "application_id": {
                      "type": "string",
                      "description": "Unique identifier of the application which the account is bound.",
                      "format": "uuid-v4",
                      "example": "6d814c28-ff73-443c-bfe0-48d518aa32fa"
                    },
                    "bank_code": {
                      "type": "string",
                      "description": "Code identifying the account's bank.",
                      "example": "160"
                    },
                    "branch": {
                      "type": "string",
                      "description": "Number of the account's branch.",
                      "example": "0001"
                    },
                    "account_number": {
                      "type": "string",
                      "description": "Number of the account.",
                      "example": "123456"
                    },
                    "account_check_digit": {
                      "type": "string",
                      "description": "Number of the account's *check-digit*.",
                      "example": "7"
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the account. [See definitions here](#account_statuses).\n",
                      "enum": [
                        "BLOCKED",
                        "ENABLED",
                        "CANCELED"
                      ],
                      "example": "ENABLED"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the person bound to the account.",
                      "example": "Julian Alfred Pankratz"
                    },
                    "document": {
                      "type": "object",
                      "description": "Document of the person bound to the account.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Document's type:\n  - `CPF`: Pessoa f\u00edsica (Natural)\n  - `CNPJ`: Pessoa jur\u00eddica (Juridical)\n",
                          "example": "CPF",
                          "enum": [
                            "CPF",
                            "CNPJ"
                          ]
                        },
                        "value": {
                          "type": "string",
                          "description": "Document's value",
                          "example": "12345678901"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest, UuidError].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Uuid Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "UUID_INVALID",
                          "enum": [
                            "UUID_INVALID"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Uuid invalid"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Unauthorized].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unauthorized",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAUTHORIZED",
                              "enum": [
                                "UNAUTHORIZED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unauthorized"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [NotFound, AccountNotFound, ProfileNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Profile Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "PROFILE_NOT_FOUND",
                          "enum": [
                            "PROFILE_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Profile not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    },
                    {
                      "title": "Account Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "ACCOUNT_NOT_FOUND",
                          "enum": [
                            "ACCOUNT_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Account not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Account successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{account_id}/balance": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves the current account balance by a given account id",
        "description": "Retrieves the current account balance",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the account.",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account balance successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "description": "Balance amount.",
                      "type": "integer",
                      "example": 15230
                    },
                    "created_at": {
                      "type": "string",
                      "description": "Creation date of balance.",
                      "example": "2020-08-06T22:10:00Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "description": "Update date of balance.",
                      "example": "2021-04-06T22:10:10Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest, UuidError].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Uuid Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "UUID_INVALID",
                          "enum": [
                            "UUID_INVALID"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Uuid invalid"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error with types [Unauthorized].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Unauthorized",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "UNAUTHORIZED",
                              "enum": [
                                "UNAUTHORIZED"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unauthorized"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "401"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [NotFound, AccountNotFound, ProfileNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Profile Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "PROFILE_NOT_FOUND",
                          "enum": [
                            "PROFILE_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Profile not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    },
                    {
                      "title": "Account Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "ACCOUNT_NOT_FOUND",
                          "enum": [
                            "ACCOUNT_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Account not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/statements/{account_id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve statements for a given account id",
        "description": "Retrieves an statements cursor response for given account id",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier of the account.",
              "format": "uuid-v4",
              "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
            }
          },
          {
            "in": "query",
            "name": "after",
            "schema": {
              "type": "string"
            },
            "description": "Base64 filter to bring only statements after the provided value",
            "required": false
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string"
            },
            "description": "Base64 filter to bring only statements before the provided value",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of statements to return. Can be omitted if provided before or after filters with limit embedded in them. If nothing is provided, the default will be 1000 as limit",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Statements successfully retrieved .",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cursor": {
                      "type": "object",
                      "properties": {
                        "after": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the last item of the list. If no more items exist, the property is removed from the response"
                        },
                        "before": {
                          "type": "string",
                          "format": "base64",
                          "description": "cursor pointing at the first item of the list. If its the first available item, the property is removed from the response"
                        },
                        "limit": {
                          "type": "number",
                          "format": "base64",
                          "description": "number of items to return."
                        }
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Describes the properties of an statements.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier of the statement.",
                            "format": "uuid-v4",
                            "example": "e363aa8b-5b4d-48c6-920d-54c1afce2643"
                          },
                          "account_id": {
                            "type": "string",
                            "description": "Unique identifier of the account.",
                            "format": "uuid-v4",
                            "example": "6d814c28-fe73-443c-bfe0-48d518aa32fa"
                          },
                          "partner_id": {
                            "type": "string",
                            "description": "Unique identifier of partner id.",
                            "format": "uuid-v4",
                            "example": "e363aa8b-5b4d-0aba-920d-54c1afce2643"
                          },
                          "value": {
                            "type": "number",
                            "description": "Statement value.",
                            "example": 160
                          },
                          "current_balance": {
                            "type": "number",
                            "nullable": true,
                            "description": "Balance value after transaction.",
                            "example": 840
                          },
                          "history_code": {
                            "type": "integer",
                            "description": "Statement history code.",
                            "example": 1
                          },
                          "reconciliated_at": {
                            "type": "string",
                            "description": "Conciliation date of statement.",
                            "example": "2020-08-06T22:10:00Z"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "Creation date of statement.",
                            "example": "2020-08-06T22:10:00Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "description": "Update date of statement.",
                            "example": "2021-04-06T22:10:10Z"
                          },
                          "open_banking": {
                            "type": "boolean",
                            "description": "Indicates that the transaction was initiated in the Open Banking.",
                            "example": true
                          },
                          "initiation_channel": {
                            "type": "string",
                            "description": "The property indicates the transaction initiation channel.",
                            "enum": [
                              "AGENCY",
                              "APP",
                              "ATM",
                              "CALL_CENTER",
                              "INTERNET_BANKING"
                            ],
                            "example": "AGENCY"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error with types [BadRequest, UuidError].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Bad Request",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "BAD_REQUEST",
                          "enum": [
                            "BAD_REQUEST"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Invalid request params"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    },
                    {
                      "title": "Uuid Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "UUID_INVALID",
                          "enum": [
                            "UUID_INVALID"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Uuid invalid"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "400"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error with types [NotFound, AccountNotFound, ProfileNotFound].",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Not Found",
                      "properties": {
                        "error": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "title": "Error code",
                              "description": "The type of error",
                              "example": "NOT_FOUND",
                              "enum": [
                                "NOT_FOUND"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "title": "Error message",
                              "description": "Describes a message informing a reason for the error",
                              "example": "Unable to found the requested account"
                            },
                            "status_code": {
                              "type": "number",
                              "description": "Error status code",
                              "example": "404"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Profile Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "PROFILE_NOT_FOUND",
                          "enum": [
                            "PROFILE_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Profile not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    },
                    {
                      "title": "Account Not Found",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "ACCOUNT_NOT_FOUND",
                          "enum": [
                            "ACCOUNT_NOT_FOUND"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Account not found"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "404"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Error with internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Internal Server Error",
                      "properties": {
                        "code": {
                          "type": "string",
                          "title": "Error code",
                          "description": "The type of error",
                          "example": "INTERNAL_SERVER_ERROR",
                          "enum": [
                            "INTERNAL_SERVER_ERROR"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "title": "Error message",
                          "description": "Describes a message informing a reason for the error",
                          "example": "Unexpected error with our service"
                        },
                        "status_code": {
                          "type": "number",
                          "description": "Error status code",
                          "example": "500"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "description": "Bearer auth (https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)."
      }
    }
  }
}
